/**
* simplemonitor API generated from simplemonitor.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


/* Do not edit this file manually */



#include "SimplemonitorJsonObject.h"
#include <regex>

namespace polycube {
namespace service {
namespace model {

SimplemonitorJsonObject::SimplemonitorJsonObject() {
  m_nameIsSet = false;
  m_ingressAction = SimplemonitorIngressActionEnum::PASS;
  m_ingressActionIsSet = true;
  m_egressAction = SimplemonitorEgressActionEnum::PASS;
  m_egressActionIsSet = true;
}

SimplemonitorJsonObject::SimplemonitorJsonObject(const nlohmann::json &val) :
  JsonObjectBase(val) {
  m_nameIsSet = false;
  m_ingressActionIsSet = false;
  m_egressActionIsSet = false;


  if (val.count("name")) {
    setName(val.at("name").get<std::string>());
  }

  if (val.count("ingress-action")) {
    setIngressAction(string_to_SimplemonitorIngressActionEnum(val.at("ingress-action").get<std::string>()));
  }

  if (val.count("egress-action")) {
    setEgressAction(string_to_SimplemonitorEgressActionEnum(val.at("egress-action").get<std::string>()));
  }
}

nlohmann::json SimplemonitorJsonObject::toJson() const {
  nlohmann::json val = nlohmann::json::object();
  if (!getBase().is_null()) {
    val.update(getBase());
  }

  if (m_nameIsSet) {
    val["name"] = m_name;
  }

  if (m_ingressActionIsSet) {
    val["ingress-action"] = SimplemonitorIngressActionEnum_to_string(m_ingressAction);
  }

  if (m_egressActionIsSet) {
    val["egress-action"] = SimplemonitorEgressActionEnum_to_string(m_egressAction);
  }

  return val;
}

std::string SimplemonitorJsonObject::getName() const {
  return m_name;
}

void SimplemonitorJsonObject::setName(std::string value) {
  m_name = value;
  m_nameIsSet = true;
}

bool SimplemonitorJsonObject::nameIsSet() const {
  return m_nameIsSet;
}



SimplemonitorIngressActionEnum SimplemonitorJsonObject::getIngressAction() const {
  return m_ingressAction;
}

void SimplemonitorJsonObject::setIngressAction(SimplemonitorIngressActionEnum value) {
  m_ingressAction = value;
  m_ingressActionIsSet = true;
}

bool SimplemonitorJsonObject::ingressActionIsSet() const {
  return m_ingressActionIsSet;
}

void SimplemonitorJsonObject::unsetIngressAction() {
  m_ingressActionIsSet = false;
}

std::string SimplemonitorJsonObject::SimplemonitorIngressActionEnum_to_string(const SimplemonitorIngressActionEnum &value){
  switch(value) {
    case SimplemonitorIngressActionEnum::DROP:
      return std::string("drop");
    case SimplemonitorIngressActionEnum::PASS:
      return std::string("pass");
    case SimplemonitorIngressActionEnum::SLOWPATH:
      return std::string("slowpath");
    default:
      throw std::runtime_error("Bad Simplemonitor ingressAction");
  }
}

SimplemonitorIngressActionEnum SimplemonitorJsonObject::string_to_SimplemonitorIngressActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return SimplemonitorIngressActionEnum::DROP;
  if (JsonObjectBase::iequals("pass", str))
    return SimplemonitorIngressActionEnum::PASS;
  if (JsonObjectBase::iequals("slowpath", str))
    return SimplemonitorIngressActionEnum::SLOWPATH;
  throw std::runtime_error("Simplemonitor ingressAction is invalid");
}
SimplemonitorEgressActionEnum SimplemonitorJsonObject::getEgressAction() const {
  return m_egressAction;
}

void SimplemonitorJsonObject::setEgressAction(SimplemonitorEgressActionEnum value) {
  m_egressAction = value;
  m_egressActionIsSet = true;
}

bool SimplemonitorJsonObject::egressActionIsSet() const {
  return m_egressActionIsSet;
}

void SimplemonitorJsonObject::unsetEgressAction() {
  m_egressActionIsSet = false;
}

std::string SimplemonitorJsonObject::SimplemonitorEgressActionEnum_to_string(const SimplemonitorEgressActionEnum &value){
  switch(value) {
    case SimplemonitorEgressActionEnum::DROP:
      return std::string("drop");
    case SimplemonitorEgressActionEnum::PASS:
      return std::string("pass");
    case SimplemonitorEgressActionEnum::SLOWPATH:
      return std::string("slowpath");
    default:
      throw std::runtime_error("Bad Simplemonitor egressAction");
  }
}

SimplemonitorEgressActionEnum SimplemonitorJsonObject::string_to_SimplemonitorEgressActionEnum(const std::string &str){
  if (JsonObjectBase::iequals("drop", str))
    return SimplemonitorEgressActionEnum::DROP;
  if (JsonObjectBase::iequals("pass", str))
    return SimplemonitorEgressActionEnum::PASS;
  if (JsonObjectBase::iequals("slowpath", str))
    return SimplemonitorEgressActionEnum::SLOWPATH;
  throw std::runtime_error("Simplemonitor egressAction is invalid");
}

}
}
}

